openapi: 3.0.1
info:
  title: MRM App API
  description: API for MRM App users
  contact:
    email: yousra@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:9090

tags:
  - name: Users
    description: MRM App users entities
  - name: Visits
    description: TODO
  - name: Appointments
    description: TODO
  - name: MedicalFiles
    description: TODO

paths:
  /users/authenticate:
    post:
      tags:
        - Users
      summary: Authenticate user
      operationId: authenticate
      requestBody:
        description: Authentication credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          $ref: '#/components/schemas/Unauthorized'

  /users:
    post:
      tags:
        - Users
      summary: Add new user
      operationId: addUser
      requestBody:
        description: Registration details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

    get:
      tags:
        - Users
      summary: Get users all users, or if filters provided get specific users if exist
      operationId: findUsers
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: If provided, result will be filtered using it
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []


    put:
      tags:
        - Users
      summary: Update user by username
      operationId: updateUser
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      security:
        - BearerAuth: []



  /visits:
    get:
      tags:
        - Visits
      summary: Get user visits
      operationId: getUserVisits
      responses:
        '200':
          description: A list of visits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visits'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /visits/{visitId}:
    get:
      tags:
        - Visits
      summary: Get visit details by visit ID
      operationId: getVisitDetails
      parameters:
        - name: visitId
          in: path
          required: true
          schema:
            type: string
          description: ID of the visit to retrieve details for
      responses:
        '200':
          description: Medical file associated with the visit (stored in AWS S3)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /appointments:
    post:
      tags:
        - Appointments
      summary: Add a new appointment
      operationId: addAppointment
      requestBody:
        description: Appointment details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentRequest"
      responses:
        '201':
          description: Appointment booked successfully
          content:
            application/json:
              schema:
                type: string
                example: Appointment booked successfully.
        '400':
          description: Bad request, invalid input or appointment conflict
          content:
            application/json:
              schema:
                type: string
                example: Appointment already exists on this date for the selected doctor. Please choose another date.
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /appointments/{appointmentId}:
    put:
      tags:
        - Appointments
      summary: Update appointment date by appointment ID
      operationId: updateAppointmentDate
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the appointment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentDateRequest"
      responses:
        '200':
          description: Appointment date updated successfully
          content:
            application/json:
              schema:
                type: string
                example: Appointment date updated successfully
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /medicalfiles:
    post:
      tags:
        - MedicalFiles
      summary: Upload a medical file
      operationId: uploadMedicalFile
      requestBody:
        description: Medical file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Medical file uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: Bad request, invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /medicalfiles/{fileId}:
    put:
      tags:
        - MedicalFiles
      summary: Update a medical file
      operationId: updateMedicalFile
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: ID of the medical file to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  fileId:
                    type: string
                    description: ID of the updated file in the system
                  fileUrl:
                    type: string
                    format: uri
                    description: URL of the updated file in AWS S3
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

components:
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string

    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    Users:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        active:
          type: boolean

    UpdateUserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        active:
          type: boolean

    AppointmentRequest:
      type: object
      properties:
        date:
          type: string
          format: date-time
        patientId:
          type: string
        doctorId:
          type: string
        description:
          type: string

    AppointmentDateRequest:
      type: object
      properties:
        date:
          type: string
          format: date-time

    AppointmentResponse:    # Add this schema definition
      type: object
      properties:
        appointmentId:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: string

    UploadResponse:
      type: object
      properties:
        fileUrl:
          type: string

    Visits:
      type: object
      properties:
        visits:
          type: array
          items:
            type: object
            properties:
              visitId:
                type: string
              userId:
                type: string
              date:
                type: string
                format: date-time

    Visit:
      type: object
      properties:
        visitId:
          type: string
        userId:
          type: string
        date:
          type: string
          format: date-time

    BadRequest:
      type: object
      description: Bad request, invalid input
      properties:
        message:
          type: string
          example: Bad request, invalid input

    NotFound:
      type: object
      description: Resource not found
      properties:
        message:
          type: string
          example: Resource not found

    Unauthorized:
      type: object
      description: Authentication credentials are missing or invalid
      properties:
        message:
          type: string
          example: Authentication credentials are missing or invalid


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
