openapi: 3.0.1
info:
  title: MRM App API
  description: API for MRM App users
  contact:
    email: acharoui.yousra@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:9090

tags:
  - name: Users
    description: Operations related to user management, including authentication, registration, and profile updates.
  - name: Appointments
    description: Operations related to scheduling and managing appointments.
  - name: MedicalFiles
    description: Operations related to managing medical files.

paths:
  /users/authenticate:
    post:
      tags:
        - Users
      summary: Authenticate user
      operationId: authenticate
      requestBody:
        description: Authentication credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          $ref: '#/components/schemas/Unauthorized'

  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: addUser
      requestBody:
        description: Registration details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

    get:
      tags:
        - Users
      summary: Retrieve all users, or filter the results based on specific criteria if provided.
      operationId: findUsers
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: If provided, result will be filtered using it
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []


    put:
      tags:
        - Users
      summary: Update user by username
      operationId: updateUser
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      security:
        - BearerAuth: []

  /appointments:
    get:
      tags:
        - Appointments
      summary: Retrieve all user appointments, or filter the results to find specific appointments if criteria are provided.
      operationId: getUserAppointments
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: If provided, result will be filtered using it
        - name: appointmentId
          in: query
          required: false
          schema:
            type: string
          description: If provided, result will be filtered using it
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointments'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []


    post:
      tags:
        - Appointments
      summary: schedule a new appointment
      operationId: scheduleAppointment
      requestBody:
        description: Appointment details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentRequest"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Bad request, invalid input or appointment conflict
          content:
            application/json:
              schema:
                type: string
                example: An appointment already exists on this date for the selected doctor. Please choose a different date.
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /appointments/{appointmentId}:
    put:
      tags:
        - Appointments
      summary: Reschedule the appointment by updating the date using the appointment ID.
      operationId: rescheduleAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the appointment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentDateRequest"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /medicalfiles:
    post:
      tags:
        - MedicalFiles
      summary: Upload a medical file
      operationId: uploadMedicalFile
      requestBody:
        description: Medical file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Medical file uploaded successfully

        '400':
          description: Bad request, invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

  /medicalfiles/{fileId}:
    put:
      tags:
        - MedicalFiles
      summary: Update a medical file
      operationId: updateMedicalFile
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: ID of the medical file to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File updated successfully

        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          $ref: '#/components/schemas/Unauthorized'
      security:
        - BearerAuth: []

components:
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
          example: yacharoui
        password:
          type: string
          example: root

    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTcyMjE3NDU2MiwiaWF0IjoxNzIyMTY3MzYyfQ.A6EIOGqlgu87MmSSRLvPztpCspR13E3ch9K-eAjvz8s

    RegistrationRequest:
      type: object
      required:
        - username
        - email
        - password
        - firstname
        - lastname
        - role
      properties:
        username:
          type: string
          example: yacharoui
        email:
          type: string
          example: acharoui.yousra@gmail.com
        password:
          type: string
          example: root
        firstname:
          type: string
          example: yousra
        lastname:
          type: string
          example: ach
        role:
          type: string
          example: HR

    Users:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        username:
          type: string
          example: yacharoui
        email:
          type: string
          example: acharoui.yousra@gmail.com
        firstname:
          type: string
          example: yousra
        lastname:
          type: string
          example: ach
        role:
          type: string
          example: HR
        active:
          type: boolean
          example: TRUE

    Appointments:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'

    Appointment:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2024-08-01T09:30:00Z"
        patientId:
          type: string
          example: "12345"
        doctorId:
          type: string
          example: "75345"
        description:
          type: string
          example: "Annual check-up"

    UpdateUserRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          example: yacharoui
        email:
          type: string
          example: acharoui.yousra@gmail.com
        roles:
          type: array
          items:
            type: string
            example: HR
        active:
          type: boolean
          example: TRUE

    AppointmentRequest:
      type: object
      required:
        - date
        - patientId
        - doctorId
        - description
      properties:
        date:
          type: string
          format: date-time
          example: "2024-08-01T09:30:00Z"
        patientId:
          type: string
          example: "12345"
        doctorId:
          type: string
          example: "75345"
        description:
          type: string
          example: "Annual check-up"

    AppointmentDateRequest:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          format: date-time
          example: "2024-08-01T09:30:00Z"

    AppointmentResponse:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2024-08-01T09:30:00Z"
        patientId:
          type: string
          example: "12345"
        doctorId:
          type: string
          example: "75345"
        description:
          type: string
          example: "Annual check-up"

    BadRequest:
      type: object
      description: Bad request, invalid input
      properties:
        message:
          type: string
          example: Bad request, invalid input

    NotFound:
      type: object
      description: Resource not found
      properties:
        message:
          type: string
          example: Resource not found

    Unauthorized:
      type: object
      description: Authentication credentials are missing or invalid
      properties:
        message:
          type: string
          example: Authentication credentials are missing or invalid

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
